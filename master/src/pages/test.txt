import React, { useState, useEffect } from "react";
import "bootstrap/dist/css/bootstrap.min.css";
import * as XLSX from "xlsx";
import axios from "axios";
import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";
import "./usermanagement.css";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { registerUser } from "../../src/services/api";
import { Filter, Search, Download, Edit, Trash2, RotateCcw, UserPlus, Users, FileSpreadsheet, FilePdf } from "lucide-react";
const UserManagementSystem = () => {
  // State declarations remain the same
  const [activeTab, setActiveTab] = useState("registration");
  const [employees, setEmployees] = useState([]);
  const [jobRoles, setJobRoles] = useState([]);
  const [departments, setDepartments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [formData, setFormData] = useState({
    id: "",
    name: "",
    dob: "",
    phone: "",
    email: "",
    password: "",
    address: "",
    departmentId: "",
    jobRoleId: "",
  });
  const [filters, setFilters] = useState({
    name: "",
    email: "",
    department: "",
    jobrole: "",
    dob: "",
  });
  const [sortConfig, setSortConfig] = useState({ key: null, direction: "asc" });
  const [groupBy, setGroupBy] = useState("");
  const [searchQuery, setSearchQuery] = useState("");

  // All fetch and handler functions remain the same
  useEffect(() => {
    const fetchData = async () => {
      try {
        await fetchDepartments();
        await fetchJobRoles();
        if (activeTab === "userList") {
          await fetchEmployees();
        }
      } catch (error) {
        console.error("Error fetching data:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [activeTab]);

  const fetchDepartments = async () => {
    try {
      const response = await axios.get(
        "http://localhost:8081/api/auth/departments"
      );
      console.log("Departments API Response:", response);
      const data = response.data || response || [];
      console.log("Departments Data Structure:", data);
      const transformedData = data.map((dept) => ({
        id: dept.id,
        name: dept.name,
      }));
      console.log("Transformed Departments:", transformedData);
      setDepartments(transformedData);
    } catch (error) {
      console.error("Error fetching departments:", error);
    }
  };

  const fetchJobRoles = async () => {
    try {
      const response = await axios.get(
        "http://localhost:8081/api/auth/job-roles"
      );
      console.log("Job Roles API Response:", response);
      const data = response.data || response || [];
      console.log("Job Roles Data Structure:", data);
      const transformedData = data.map((role) => ({
        id: role.id,
        name: role.name,
      }));
      console.log("Transformed Job Roles:", transformedData);
      setJobRoles(transformedData);
    } catch (error) {
      console.error("Error fetching job roles:", error);
    }
  };

  const fetchEmployees = async () => {
    try {
      const response = await axios.get("http://localhost:8081/api/auth/users");
      console.log("Employees API Response:", response);
      console.log("Employees Data:", response);
      setEmployees(response || []);
    } catch (error) {
      console.error("Error fetching employees:", error);
      setEmployees([]);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const payload = {
        fullName: formData.name,
        email: formData.email,
        password: formData.password,
        dob: new Date(formData.dob).toISOString().split("T")[0],
        phoneNo: formData.phone,
        address: formData.address,
        departmentId: parseInt(formData.departmentId, 10),
        jobRoleId: parseInt(formData.jobRoleId, 10),
      };

      const response = await registerUser(payload);
      console.log("Registration Response:", response);

      toast.success("Employee registered successfully!");

      setFormData({
        id: "",
        name: "",
        dob: "",
        phone: "",
        email: "",
        password: "",
        address: "",
        departmentId: "",
        jobRoleId: "",
      });
    } catch (error) {
      console.error("Error saving employee:", error);
      toast.error(error || "Registration failed. Please try again.");
    }
  };

  const handleEditAndUpdate = async (id) => {
    if (id) {
      const employee = employees.find((emp) => emp.id === id);
      if (employee) {
        setFormData({
          id: employee.id,
          name: employee.fullName,
          dob: employee.dob,
          phone: employee.phoneNo,
          email: employee.email,
          password: "",
          address: employee.address,
          departmentId: employee.department?.id || "",
          jobRoleId: employee.jobRole?.id || "",
        });
        setActiveTab("registration");
      } else {
        console.error("Employee not found");
        toast.error("Employee not found");
      }
    } else {
      try {
        const payload = {
          fullName: formData.name,
          email: formData.email,
          dob: new Date(formData.dob).toISOString().split("T")[0],
          phoneNo: formData.phone,
          address: formData.address,
          departmentId: parseInt(formData.departmentId, 10),
          jobRoleId: parseInt(formData.jobRoleId, 10),
        };
  
        if (formData.password) {
          payload.password = formData.password;
        }
  
        let response;
        if (formData.id) {
          console.log("Updating employee with ID:", formData.id);
          response = await axios.put(
            `http://localhost:8081/api/auth/users/${formData.id}`,
            payload
          );
          toast.success("Employee updated successfully!");
        } else {
          console.log("Registering new employee");
          response = await registerUser(payload);
          toast.success("Employee registered successfully!");
        }
  
        console.log("Registration/Update Response:", response);
  
        setFormData({
          id: "",
          name: "",
          dob: "",
          phone: "",
          email: "",
          password: "",
          address: "",
          departmentId: "",
          jobRoleId: "",
        });
  
        fetchEmployees();
      } catch (error) {
        console.error("Error saving employee:", error);
        toast.error(error.response?.data?.message || "Registration/Update failed. Please try again.");
      }
    }
  };

  const handleDelete = async (id) => {
    try {
      await axios.delete(`http://localhost:8081/api/auth/users/${id}`);
      fetchEmployees();
      toast.success("Employee deleted successfully!");
    } catch (error) {
      console.error("Error deleting employee:", error);
      toast.error("Failed to delete employee");
    }
  };

  const handleFilterChange = (key, value) => {
    setFilters({
      ...filters,
      [key]: value,
    });
  };

  const requestSort = (key) => {
    let direction = "asc";
    if (sortConfig.key === key && sortConfig.direction === "asc") {
      direction = "desc";
    }
    setSortConfig({ key, direction });
  };

  const handleGroupBy = (key) => {
    setGroupBy(key);
  };

  const filteredEmployees = (employees || []).filter((employee) => {
    const matchesName = (employee.fullName?.toLowerCase() || "").includes(
      filters.name.toLowerCase()
    );
    const matchesEmail = (employee.email?.toLowerCase() || "").includes(
      filters.email.toLowerCase()
    );
    const matchesDepartment = (
      employee.departmentName?.toLowerCase() || ""
    ).includes(filters.department.toLowerCase());
    const matchesJobRole = (employee.jobRoleName?.toLowerCase() || "").includes(
      filters.jobrole.toLowerCase()
    );
    const matchesDob = employee.dob?.includes(filters.dob) || "";
    const matchesSearchQuery =
      (employee.fullName?.toLowerCase() || "").includes(
        searchQuery.toLowerCase()
      ) ||
      (employee.email?.toLowerCase() || "").includes(
        searchQuery.toLowerCase()
      ) ||
      (employee.departmentName?.toLowerCase() || "").includes(
        searchQuery.toLowerCase()
      ) ||
      (employee.jobRoleName?.toLowerCase() || "").includes(
        searchQuery.toLowerCase()
      );

    return (
      (filters.name ? matchesName : true) &&
      (filters.email ? matchesEmail : true) &&
      (filters.department ? matchesDepartment : true) &&
      (filters.jobrole ? matchesJobRole : true) &&
      (filters.dob ? matchesDob : true) &&
      (searchQuery ? matchesSearchQuery : true)
    );
  });

  const groupedEmployees = groupBy
    ? (filteredEmployees || []).reduce((acc, employee) => {
        const key =
          employee[
            groupBy === "department"
              ? "departmentName"
              : groupBy === "jobRole"
              ? "jobRoleName"
              : "dob"
          ] || "Unknown";
        if (!acc[key]) {
          acc[key] = [];
        }
        acc[key].push(employee);
        return acc;
      }, {})
    : { "All Employees": filteredEmployees || [] };

  const exportToExcel = () => {
    const data = filteredEmployees.map((employee) => ({
      "Full Name": employee.fullName,
      Email: employee.email,
      "Phone No": employee.phoneNo,
      Department: employee.departmentName,
      "Job Role": employee.jobRoleName,
      "Date of Birth": employee.dob,
    }));

    const worksheet = XLSX.utils.json_to_sheet(data);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "Employees");
    XLSX.writeFile(workbook, "Employees.xlsx");
  };

  const exportToPDF = () => {
    const doc = new jsPDF();

    autoTable(doc, {
      head: [
        [
          "Full Name",
          "Email",
          "Phone No",
          "Department",
          "Job Role",
          "Date of Birth",
        ],
      ],
      body: filteredEmployees.map((employee) => [
        employee.fullName,
        employee.email,
        employee.phoneNo,
        employee.departmentName || "N/A",
        employee.jobRoleName || "N/A",
        employee.dob,
      ]),
    });

    doc.save("Employees.pdf");
  };

  if (loading) {
    return (
      <div className="d-flex justify-content-center align-items-center vh-100">
        <div className="spinner-border text-primary" role="status">
          <span className="visually-hidden">Loading...</span>
        </div>
      </div>
    );
  }

  // Improved UI rendering
  return (
    <React.Fragment>
      <div className="container-fluid p-4 bg-gradient-to-r from-blue-50 to-indigo-50 min-vh-100">
        <div className="row justify-content-center">
          <div className="col-lg-10">
            <div className="card shadow-lg border-0 rounded-lg">
              <div className="card-header bg-gradient-to-r from-blue-500 to-indigo-600 text-white py-3">
                <h2 className="card-title text-center mb-0 fw-bold">Employee Management System</h2>
              </div>
              <div className="card-body">
                {/* Tab Navigation - Enhanced Style */}
                <ul className="nav nav-pills nav-fill mb-4">
                  <li className="nav-item mx-1">
                    <button
                      className={`nav-link ${
                        activeTab === "registration" ? "active bg-primary" : "text-primary"
                      } d-flex align-items-center justify-content-center`}
                      onClick={() => setActiveTab("registration")}
                    >
                      <UserPlus size={18} className="me-2" />
                      <span>Employee Registration</span>
                    </button>
                  </li>
                  <li className="nav-item mx-1">
                    <button
                      className={`nav-link ${
                        activeTab === "userList" ? "active bg-primary" : "text-primary"
                      } d-flex align-items-center justify-content-center`}
                      onClick={() => setActiveTab("userList")}
                    >
                      <Users size={18} className="me-2" />
                      <span>Employee List</span>
                    </button>
                  </li>
                </ul>

                {/* Registration Form - Enhanced UI */}
                {activeTab === "registration" && (
                  <div className="tab-pane fade show active">
                    <form onSubmit={handleSubmit} className="bg-white p-4 rounded-lg shadow-sm">
                      <div className="row g-3">
                        <div className="col-md-6">
                          <label className="form-label fw-bold text-secondary">Full Name</label>
                          <input
                            type="text"
                            name="name"
                            value={formData.name}
                            onChange={handleInputChange}
                            className="form-control form-control-lg border-light"
                            placeholder="Enter full name"
                            required
                          />
                        </div>
                        <div className="col-md-6">
                          <label className="form-label fw-bold text-secondary">Date of Birth</label>
                          <input
                            type="date"
                            name="dob"
                            value={formData.dob}
                            onChange={handleInputChange}
                            className="form-control form-control-lg border-light"
                            required
                          />
                        </div>
                        <div className="col-md-6">
                          <label className="form-label fw-bold text-secondary">Phone Number</label>
                          <input
                            type="tel"
                            name="phone"
                            value={formData.phone}
                            onChange={handleInputChange}
                            className="form-control form-control-lg border-light"
                            placeholder="Enter phone number"
                            required
                          />
                        </div>
                        <div className="col-md-6">
                          <label className="form-label fw-bold text-secondary">Email Address</label>
                          <input
                            type="email"
                            name="email"
                            value={formData.email}
                            onChange={handleInputChange}
                            className="form-control form-control-lg border-light"
                            placeholder="Enter email address"
                            required
                          />
                        </div>
                        <div className="col-md-6">
                          <label className="form-label fw-bold text-secondary">Password</label>
                          <input
                            type="password"
                            name="password"
                            value={formData.password}
                            onChange={handleInputChange}
                            className="form-control form-control-lg border-light"
                            placeholder="Enter password"
                            disabled={!!formData.id}
                            required={!formData.id}
                          />
                          {formData.id && (
                            <small className="text-muted">
                              Password cannot be changed here.
                            </small>
                          )}
                        </div>
                        <div className="col-md-6">
                          <label className="form-label fw-bold text-secondary">Address</label>
                          <textarea
                            name="address"
                            value={formData.address}
                            onChange={handleInputChange}
                            className="form-control form-control-lg border-light"
                            placeholder="Enter complete address"
                            rows="3"
                            required
                          ></textarea>
                        </div>
                        <div className="col-md-6">
                          <label className="form-label fw-bold text-secondary">Department</label>
                          <select
                            name="departmentId"
                            value={formData.departmentId}
                            onChange={handleInputChange}
                            className="form-select form-select-lg border-light"
                            required
                          >
                            <option value="">Select Department</option>
                            {departments.map((dept) => (
                              <option key={dept.id} value={dept.id}>
                                {dept.name}
                              </option>
                            ))}
                          </select>
                        </div>
                        <div className="col-md-6">
                          <label className="form-label fw-bold text-secondary">Job Role</label>
                          <select
                            name="jobRoleId"
                            value={formData.jobRoleId}
                            onChange={handleInputChange}
                            className="form-select form-select-lg border-light"
                            required
                          >
                            <option value="">Select Job Role</option>
                            {jobRoles.map((role) => (
                              <option key={role.id} value={role.id}>
                                {role.name}
                              </option>
                            ))}
                          </select>
                        </div>
                        <div className="col-12 d-flex justify-content-end gap-2 mt-4">
                          <button
                            type="button"
                            onClick={() =>
                              setFormData({
                                id: "",
                                name: "",
                                dob: "",
                                phone: "",
                                email: "",
                                password: "",
                                address: "",
                                departmentId: "",
                                jobRoleId: "",
                              })
                            }
                            className="btn btn-outline-secondary btn-lg d-flex align-items-center"
                          >
                            <RotateCcw size={18} className="me-2" />
                            Reset
                          </button>
                          <button type="submit" className="btn btn-primary btn-lg d-flex align-items-center">
                            {formData.id ? (
                              <>
                                <Edit size={18} className="me-2" />
                                Update Employee
                              </>
                            ) : (
                              <>
                                <UserPlus size={18} className="me-2" />
                                Register Employee
                              </>
                            )}
                          </button>
                        </div>
                      </div>
                    </form>
                  </div>
                )}

                {/* Employee List - Improved UI and Table Alignment */}
                {activeTab === "userList" && (
                  <div className="tab-pane fade show active">
                    <div className="bg-white p-4 rounded-lg shadow-sm">
                      <div className="d-flex flex-wrap justify-content-between align-items-center mb-4 gap-3">
                        <div className="d-flex flex-wrap gap-3">
                          <div className="input-group" style={{ width: "300px" }}>
                            <input
                              type="text"
                              className="form-control form-control-lg border-light"
                              placeholder="Search employees..."
                              value={searchQuery}
                              onChange={(e) => setSearchQuery(e.target.value)}
                            />
                            <button
                              className="btn btn-outline-primary"
                              type="button"
                            >
                              <Search size={18} />
                            </button>
                          </div>
                          <select
                            className="form-select form-select-lg border-light"
                            style={{ width: "220px" }}
                            value={groupBy}
                            onChange={(e) => handleGroupBy(e.target.value)}
                          >
                            <option value="">No Grouping</option>
                            <option value="department">Group by Department</option>
                            <option value="jobRole">Group by Job Role</option>
                            <option value="dob">Group by Date of Birth</option>
                          </select>
                        </div>
                        <div className="dropdown">
                          <button
                            className="btn btn-success btn-lg dropdown-toggle d-flex align-items-center"
                            type="button"
                            id="exportDropdown"
                            data-bs-toggle="dropdown"
                            aria-expanded="false"
                          >
                            <Download size={18} className="me-2" />
                            Export Data
                          </button>
                          <ul
                            className="dropdown-menu"
                            aria-labelledby="exportDropdown"
                          >
                            <li>
                              <button
                                className="dropdown-item d-flex align-items-center"
                                onClick={exportToExcel}
                              >
                                <FileSpreadsheet size={18} className="me-2" />
                                Export to Excel
                              </button>
                            </li>
                            <li>

                            <button
  className="dropdown-item d-flex align-items-center"
  onClick={exportToPDF}
>
  <FilePdf size={18} className="me-2" />
  Export to PDF
</button>
                            </li>
                          </ul>
                        </div>
                      </div>
                      
                      {/* Fixed width table columns for better data alignment */}
                      <div className="table-responsive">
                        <table className="table table-hover table-striped align-middle">
                          <thead className="table-light">
                            <tr>
                              <th style={{ width: "20%" }}>
                                <div className="d-flex align-items-center">
                                  <span>Name</span>
                                  <div className="ms-auto d-flex">
                                    <button
                                      className="btn btn-sm btn-light"
                                      onClick={() => requestSort("name")}
                                    >
                                      {sortConfig.key === "name"
                                        ? sortConfig.direction === "asc"
                                          ? "↑"
                                          : "↓"
                                        : "↕️"}
                                    </button>
                                    <button
                                      className="btn btn-sm btn-light ms-1"
                                      onClick={() =>
                                        handleFilterChange(
                                          "name",
                                          prompt("Enter filter value for Name:")
                                        )
                                      }
                                    >
                                      <Filter size={16} />
                                    </button>
                                  </div>
                                </div>
                              </th>
                              <th style={{ width: "15%" }}>
                                <div className="d-flex align-items-center">
                                  <span>Email</span>
                                  <button
                                    className="btn btn-sm btn-light ms-auto"
                                    onClick={() =>
                                      handleFilterChange(
                                        "email",
                                        prompt("Enter filter value for Email:")
                                      )
                                    }
                                  >
                                    <Filter size={16} />
                                  </button>
                                </div>
                              </th>
                              <th style={{ width: "12%" }}>
                                <div className="d-flex align-items-center">
                                  <span>Phone</span>
                                  <button
                                    className="btn btn-sm btn-light ms-auto"
                                    onClick={() =>
                                      handleFilterChange(
                                        "phoneNo",
                                        prompt("Enter filter value for Phone:")
                                      )
                                    }
                                  >
                                    <Filter size={16} />
                                  </button>
                                </div>
                              </th>
                              <th style={{ width: "13%" }}>
                                <div className="d-flex align-items-center">
                                  <span>Department</span>
                                  <div className="ms-auto d-flex">
                                    <button
                                      className="btn btn-sm btn-light"
                                      onClick={() => requestSort("department")}
                                    >
                                      {sortConfig.key === "department"
                                        ? sortConfig.direction === "asc"
                                          ? "↑"
                                          : "↓"
                                        : "↕️"}
                                    </button>
                                    <button
                                      className="btn btn-sm btn-light ms-1"
                                      onClick={() =>
                                        handleFilterChange(
                                          "department",
                                          prompt("Enter filter value for Department:")
                                        )
                                      }
                                    >
                                      <Filter size={16} />
                                    </button>
                                  </div>
                                </div>
                              </th>
                              <th style={{ width: "13%" }}>
                                <div className="d-flex align-items-center">
                                  <span>Job Role</span>
                                  <div className="ms-auto d-flex">
                                    <button
                                      className="btn btn-sm btn-light"
                                      onClick={() => requestSort("jobRole")}
                                    >
                                      {sortConfig.key === "jobRole"
                                        ? sortConfig.direction === "asc"
                                          ? "↑"
                                          : "↓"
                                        : "↕️"}
                                    </button>
                                    <button
                                      className="btn btn-sm btn-light ms-1"
                                      onClick={() =>
                                        handleFilterChange(
                                          "jobRole",
                                          prompt("Enter filter value for Job Role:")
                                        )
                                      }
                                    >
                                      <Filter size={16} />
                                    </button>
                                  </div>
                                </div>
                              </th>
                              <th style={{ width: "12%" }}>
                                <div className="d-flex align-items-center">
                                  <span>DOB</span>
                                  <div className="ms-auto d-flex">
                                    <button
                                      className="btn btn-sm btn-light"
                                      onClick={() => requestSort("dob")}
                                    >
                                      {sortConfig.key === "dob"
                                        ? sortConfig.direction === "asc"
                                          ? "↑"
                                          : "↓"
                                        : "↕️"}
                                    </button>
                                    <button
                                      className="btn btn-sm btn-light ms-1"
                                      onClick={() =>
                                        handleFilterChange(
                                          "dob",
                                          prompt("Enter filter value for DOB:")
                                        )
                                      }
                                    >
                                      <Filter size={16} />
                                    </button>
                                  </div>
                                </div>
                              </th>
                              <th style={{ width: "15%" }} className="text-center">Actions</th>
                            </tr>
                          </thead>
                          <tbody>
                            {Object.entries(groupedEmployees).length > 0 ? (
                              Object.entries(groupedEmployees).map(
                                ([group, employees]) => (
                                  <React.Fragment key={group}>
                                    <tr className="bg-light">
                                      <td colSpan="7" className="fw-bold text-primary">
                                        {group} ({employees.length})
                                      </td>
                                    </tr>
                                    {employees?.map((employee) => (
                                      <tr key={employee.id}>
                                        <td className="align-middle">{employee.fullName}</td>
                                        <td className="align-middle">{employee.email}</td>
                                        <td className="align-middle">{employee.phoneNo}</td>
                                        <td className="align-middle">
                                          {employee.departmentName ?? "N/A"}
                                        </td>
                                        <td className="align-middle">{employee.jobRoleName ?? "N/A"}</td>
                                        <td className="align-middle">{employee.dob}</td>
                                        <td className="align-middle text-center">
                                          <button
                                            className="btn btn-outline-warning btn-sm me-2"
                                            onClick={() =>
                                              handleEditAndUpdate(employee.id)
                                            }
                                          >
                                            <Edit size={16} />
                                          </button>
                                          <button
                                            className="btn btn-outline-danger btn-sm"
                                            onClick={() =>
                                              handleDelete(employee.id)
                                            }
                                          >
                                            <Trash2 size={16} />
                                          </button>
                                        </td>
                                      </tr>
                                    ))}
                                  </React.Fragment>
                                )
                              )
                            ) : (
                              <tr>
                                <td colSpan="7" className="text-center py-4">
                                  <div className="alert alert-info mb-0">
                                    No employees found.
                                  </div>
                                </td>
                              </tr>
                            )}
                          </tbody>
                        </table>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
      <ToastContainer />
    </React.Fragment>
  );
};

export default UserManagementSystem;